/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vswamy.ab_testing;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-24")
public class ExperimentStateResponse implements org.apache.thrift.TBase<ExperimentStateResponse, ExperimentStateResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ExperimentStateResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExperimentStateResponse");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DEBUG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("debugInfo", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField ALL_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("allStates", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExperimentStateResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExperimentStateResponseTupleSchemeFactory());
  }

  public ExperimentState state; // required
  public boolean debugInfo; // required
  public List<ExperimentState> allStates; // required
  public String comment; // optional
  public String experimentName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE((short)1, "state"),
    DEBUG_INFO((short)2, "debugInfo"),
    ALL_STATES((short)3, "allStates"),
    COMMENT((short)4, "comment"),
    EXPERIMENT_NAME((short)5, "experimentName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // DEBUG_INFO
          return DEBUG_INFO;
        case 3: // ALL_STATES
          return ALL_STATES;
        case 4: // COMMENT
          return COMMENT;
        case 5: // EXPERIMENT_NAME
          return EXPERIMENT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEBUGINFO_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentState.class)));
    tmpMap.put(_Fields.DEBUG_INFO, new org.apache.thrift.meta_data.FieldMetaData("debugInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALL_STATES, new org.apache.thrift.meta_data.FieldMetaData("allStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentState.class))));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERIMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("experimentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExperimentStateResponse.class, metaDataMap);
  }

  public ExperimentStateResponse() {
    this.debugInfo = false;

  }

  public ExperimentStateResponse(
    ExperimentState state,
    boolean debugInfo,
    List<ExperimentState> allStates,
    String experimentName)
  {
    this();
    this.state = state;
    this.debugInfo = debugInfo;
    setDebugInfoIsSet(true);
    this.allStates = allStates;
    this.experimentName = experimentName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExperimentStateResponse(ExperimentStateResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetState()) {
      this.state = new ExperimentState(other.state);
    }
    this.debugInfo = other.debugInfo;
    if (other.isSetAllStates()) {
      List<ExperimentState> __this__allStates = new ArrayList<ExperimentState>(other.allStates.size());
      for (ExperimentState other_element : other.allStates) {
        __this__allStates.add(new ExperimentState(other_element));
      }
      this.allStates = __this__allStates;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetExperimentName()) {
      this.experimentName = other.experimentName;
    }
  }

  public ExperimentStateResponse deepCopy() {
    return new ExperimentStateResponse(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.debugInfo = false;

    this.allStates = null;
    this.comment = null;
    this.experimentName = null;
  }

  public ExperimentState getState() {
    return this.state;
  }

  public ExperimentStateResponse setState(ExperimentState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public boolean isDebugInfo() {
    return this.debugInfo;
  }

  public ExperimentStateResponse setDebugInfo(boolean debugInfo) {
    this.debugInfo = debugInfo;
    setDebugInfoIsSet(true);
    return this;
  }

  public void unsetDebugInfo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBUGINFO_ISSET_ID);
  }

  /** Returns true if field debugInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDebugInfo() {
    return EncodingUtils.testBit(__isset_bitfield, __DEBUGINFO_ISSET_ID);
  }

  public void setDebugInfoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBUGINFO_ISSET_ID, value);
  }

  public int getAllStatesSize() {
    return (this.allStates == null) ? 0 : this.allStates.size();
  }

  public java.util.Iterator<ExperimentState> getAllStatesIterator() {
    return (this.allStates == null) ? null : this.allStates.iterator();
  }

  public void addToAllStates(ExperimentState elem) {
    if (this.allStates == null) {
      this.allStates = new ArrayList<ExperimentState>();
    }
    this.allStates.add(elem);
  }

  public List<ExperimentState> getAllStates() {
    return this.allStates;
  }

  public ExperimentStateResponse setAllStates(List<ExperimentState> allStates) {
    this.allStates = allStates;
    return this;
  }

  public void unsetAllStates() {
    this.allStates = null;
  }

  /** Returns true if field allStates is set (has been assigned a value) and false otherwise */
  public boolean isSetAllStates() {
    return this.allStates != null;
  }

  public void setAllStatesIsSet(boolean value) {
    if (!value) {
      this.allStates = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public ExperimentStateResponse setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public String getExperimentName() {
    return this.experimentName;
  }

  public ExperimentStateResponse setExperimentName(String experimentName) {
    this.experimentName = experimentName;
    return this;
  }

  public void unsetExperimentName() {
    this.experimentName = null;
  }

  /** Returns true if field experimentName is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentName() {
    return this.experimentName != null;
  }

  public void setExperimentNameIsSet(boolean value) {
    if (!value) {
      this.experimentName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((ExperimentState)value);
      }
      break;

    case DEBUG_INFO:
      if (value == null) {
        unsetDebugInfo();
      } else {
        setDebugInfo((Boolean)value);
      }
      break;

    case ALL_STATES:
      if (value == null) {
        unsetAllStates();
      } else {
        setAllStates((List<ExperimentState>)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case EXPERIMENT_NAME:
      if (value == null) {
        unsetExperimentName();
      } else {
        setExperimentName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case DEBUG_INFO:
      return Boolean.valueOf(isDebugInfo());

    case ALL_STATES:
      return getAllStates();

    case COMMENT:
      return getComment();

    case EXPERIMENT_NAME:
      return getExperimentName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case DEBUG_INFO:
      return isSetDebugInfo();
    case ALL_STATES:
      return isSetAllStates();
    case COMMENT:
      return isSetComment();
    case EXPERIMENT_NAME:
      return isSetExperimentName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExperimentStateResponse)
      return this.equals((ExperimentStateResponse)that);
    return false;
  }

  public boolean equals(ExperimentStateResponse that) {
    if (that == null)
      return false;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_debugInfo = true;
    boolean that_present_debugInfo = true;
    if (this_present_debugInfo || that_present_debugInfo) {
      if (!(this_present_debugInfo && that_present_debugInfo))
        return false;
      if (this.debugInfo != that.debugInfo)
        return false;
    }

    boolean this_present_allStates = true && this.isSetAllStates();
    boolean that_present_allStates = true && that.isSetAllStates();
    if (this_present_allStates || that_present_allStates) {
      if (!(this_present_allStates && that_present_allStates))
        return false;
      if (!this.allStates.equals(that.allStates))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_experimentName = true && this.isSetExperimentName();
    boolean that_present_experimentName = true && that.isSetExperimentName();
    if (this_present_experimentName || that_present_experimentName) {
      if (!(this_present_experimentName && that_present_experimentName))
        return false;
      if (!this.experimentName.equals(that.experimentName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_debugInfo = true;
    list.add(present_debugInfo);
    if (present_debugInfo)
      list.add(debugInfo);

    boolean present_allStates = true && (isSetAllStates());
    list.add(present_allStates);
    if (present_allStates)
      list.add(allStates);

    boolean present_comment = true && (isSetComment());
    list.add(present_comment);
    if (present_comment)
      list.add(comment);

    boolean present_experimentName = true && (isSetExperimentName());
    list.add(present_experimentName);
    if (present_experimentName)
      list.add(experimentName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExperimentStateResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebugInfo()).compareTo(other.isSetDebugInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugInfo, other.debugInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllStates()).compareTo(other.isSetAllStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allStates, other.allStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentName()).compareTo(other.isSetExperimentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentName, other.experimentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExperimentStateResponse(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("debugInfo:");
    sb.append(this.debugInfo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allStates:");
    if (this.allStates == null) {
      sb.append("null");
    } else {
      sb.append(this.allStates);
    }
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("experimentName:");
    if (this.experimentName == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (state != null) {
      state.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExperimentStateResponseStandardSchemeFactory implements SchemeFactory {
    public ExperimentStateResponseStandardScheme getScheme() {
      return new ExperimentStateResponseStandardScheme();
    }
  }

  private static class ExperimentStateResponseStandardScheme extends StandardScheme<ExperimentStateResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExperimentStateResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.state = new ExperimentState();
              struct.state.read(iprot);
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEBUG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.debugInfo = iprot.readBool();
              struct.setDebugInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALL_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.allStates = new ArrayList<ExperimentState>(_list0.size);
                ExperimentState _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ExperimentState();
                  _elem1.read(iprot);
                  struct.allStates.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAllStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPERIMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experimentName = iprot.readString();
              struct.setExperimentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExperimentStateResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        struct.state.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEBUG_INFO_FIELD_DESC);
      oprot.writeBool(struct.debugInfo);
      oprot.writeFieldEnd();
      if (struct.allStates != null) {
        oprot.writeFieldBegin(ALL_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.allStates.size()));
          for (ExperimentState _iter3 : struct.allStates)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.experimentName != null) {
        oprot.writeFieldBegin(EXPERIMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.experimentName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExperimentStateResponseTupleSchemeFactory implements SchemeFactory {
    public ExperimentStateResponseTupleScheme getScheme() {
      return new ExperimentStateResponseTupleScheme();
    }
  }

  private static class ExperimentStateResponseTupleScheme extends TupleScheme<ExperimentStateResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExperimentStateResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetDebugInfo()) {
        optionals.set(1);
      }
      if (struct.isSetAllStates()) {
        optionals.set(2);
      }
      if (struct.isSetComment()) {
        optionals.set(3);
      }
      if (struct.isSetExperimentName()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetState()) {
        struct.state.write(oprot);
      }
      if (struct.isSetDebugInfo()) {
        oprot.writeBool(struct.debugInfo);
      }
      if (struct.isSetAllStates()) {
        {
          oprot.writeI32(struct.allStates.size());
          for (ExperimentState _iter4 : struct.allStates)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetExperimentName()) {
        oprot.writeString(struct.experimentName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExperimentStateResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.state = new ExperimentState();
        struct.state.read(iprot);
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.debugInfo = iprot.readBool();
        struct.setDebugInfoIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.allStates = new ArrayList<ExperimentState>(_list5.size);
          ExperimentState _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ExperimentState();
            _elem6.read(iprot);
            struct.allStates.add(_elem6);
          }
        }
        struct.setAllStatesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.experimentName = iprot.readString();
        struct.setExperimentNameIsSet(true);
      }
    }
  }

}

