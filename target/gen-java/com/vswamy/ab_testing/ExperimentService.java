/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vswamy.ab_testing;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-25")
public class ExperimentService {

  public interface Iface {

    public boolean ping() throws org.apache.thrift.TException;

    public String getExperimentState(String experimentName) throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException;

    public Map<String,String> getExperimentsState(List<String> experimentsName) throws NullOrEmptyException, org.apache.thrift.TException;

    public Experiment getExperiment(String experimentName) throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException;

    public boolean createExperiment(Experiment experiment) throws ExperimentAlreadyExistsException, NullOrEmptyException, org.apache.thrift.TException;

    public boolean editExperiment(Experiment experiment) throws InvalidPasscodeException, NullOrEmptyException, ExperimentNotFoundException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperimentState(String experimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperimentsState(List<String> experimentsName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperiment(String experimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createExperiment(Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editExperiment(Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public boolean recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public String getExperimentState(String experimentName) throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException
    {
      send_getExperimentState(experimentName);
      return recv_getExperimentState();
    }

    public void send_getExperimentState(String experimentName) throws org.apache.thrift.TException
    {
      getExperimentState_args args = new getExperimentState_args();
      args.setExperimentName(experimentName);
      sendBase("getExperimentState", args);
    }

    public String recv_getExperimentState() throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException
    {
      getExperimentState_result result = new getExperimentState_result();
      receiveBase(result, "getExperimentState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.experimentNotFoundException != null) {
        throw result.experimentNotFoundException;
      }
      if (result.nullOrEmptyException != null) {
        throw result.nullOrEmptyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperimentState failed: unknown result");
    }

    public Map<String,String> getExperimentsState(List<String> experimentsName) throws NullOrEmptyException, org.apache.thrift.TException
    {
      send_getExperimentsState(experimentsName);
      return recv_getExperimentsState();
    }

    public void send_getExperimentsState(List<String> experimentsName) throws org.apache.thrift.TException
    {
      getExperimentsState_args args = new getExperimentsState_args();
      args.setExperimentsName(experimentsName);
      sendBase("getExperimentsState", args);
    }

    public Map<String,String> recv_getExperimentsState() throws NullOrEmptyException, org.apache.thrift.TException
    {
      getExperimentsState_result result = new getExperimentsState_result();
      receiveBase(result, "getExperimentsState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.nullOrEmptyException != null) {
        throw result.nullOrEmptyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperimentsState failed: unknown result");
    }

    public Experiment getExperiment(String experimentName) throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException
    {
      send_getExperiment(experimentName);
      return recv_getExperiment();
    }

    public void send_getExperiment(String experimentName) throws org.apache.thrift.TException
    {
      getExperiment_args args = new getExperiment_args();
      args.setExperimentName(experimentName);
      sendBase("getExperiment", args);
    }

    public Experiment recv_getExperiment() throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException
    {
      getExperiment_result result = new getExperiment_result();
      receiveBase(result, "getExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.experimentNotFoundException != null) {
        throw result.experimentNotFoundException;
      }
      if (result.nullOrEmptyException != null) {
        throw result.nullOrEmptyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperiment failed: unknown result");
    }

    public boolean createExperiment(Experiment experiment) throws ExperimentAlreadyExistsException, NullOrEmptyException, org.apache.thrift.TException
    {
      send_createExperiment(experiment);
      return recv_createExperiment();
    }

    public void send_createExperiment(Experiment experiment) throws org.apache.thrift.TException
    {
      createExperiment_args args = new createExperiment_args();
      args.setExperiment(experiment);
      sendBase("createExperiment", args);
    }

    public boolean recv_createExperiment() throws ExperimentAlreadyExistsException, NullOrEmptyException, org.apache.thrift.TException
    {
      createExperiment_result result = new createExperiment_result();
      receiveBase(result, "createExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.experimentAlreadyExistsException != null) {
        throw result.experimentAlreadyExistsException;
      }
      if (result.nullOrEmptyException != null) {
        throw result.nullOrEmptyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createExperiment failed: unknown result");
    }

    public boolean editExperiment(Experiment experiment) throws InvalidPasscodeException, NullOrEmptyException, ExperimentNotFoundException, org.apache.thrift.TException
    {
      send_editExperiment(experiment);
      return recv_editExperiment();
    }

    public void send_editExperiment(Experiment experiment) throws org.apache.thrift.TException
    {
      editExperiment_args args = new editExperiment_args();
      args.setExperiment(experiment);
      sendBase("editExperiment", args);
    }

    public boolean recv_editExperiment() throws InvalidPasscodeException, NullOrEmptyException, ExperimentNotFoundException, org.apache.thrift.TException
    {
      editExperiment_result result = new editExperiment_result();
      receiveBase(result, "editExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalidPasscodeException != null) {
        throw result.invalidPasscodeException;
      }
      if (result.nullOrEmptyException != null) {
        throw result.nullOrEmptyException;
      }
      if (result.experimentNotFoundException != null) {
        throw result.experimentNotFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editExperiment failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void getExperimentState(String experimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperimentState_call method_call = new getExperimentState_call(experimentName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperimentState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String experimentName;
      public getExperimentState_call(String experimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experimentName = experimentName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperimentState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperimentState_args args = new getExperimentState_args();
        args.setExperimentName(experimentName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperimentState();
      }
    }

    public void getExperimentsState(List<String> experimentsName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperimentsState_call method_call = new getExperimentsState_call(experimentsName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperimentsState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> experimentsName;
      public getExperimentsState_call(List<String> experimentsName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experimentsName = experimentsName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperimentsState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperimentsState_args args = new getExperimentsState_args();
        args.setExperimentsName(experimentsName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws NullOrEmptyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperimentsState();
      }
    }

    public void getExperiment(String experimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperiment_call method_call = new getExperiment_call(experimentName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String experimentName;
      public getExperiment_call(String experimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experimentName = experimentName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperiment_args args = new getExperiment_args();
        args.setExperimentName(experimentName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Experiment getResult() throws ExperimentNotFoundException, NullOrEmptyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperiment();
      }
    }

    public void createExperiment(Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createExperiment_call method_call = new createExperiment_call(experiment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Experiment experiment;
      public createExperiment_call(Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experiment = experiment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createExperiment_args args = new createExperiment_args();
        args.setExperiment(experiment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ExperimentAlreadyExistsException, NullOrEmptyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createExperiment();
      }
    }

    public void editExperiment(Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editExperiment_call method_call = new editExperiment_call(experiment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Experiment experiment;
      public editExperiment_call(Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experiment = experiment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editExperiment_args args = new editExperiment_args();
        args.setExperiment(experiment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws InvalidPasscodeException, NullOrEmptyException, ExperimentNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editExperiment();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getExperimentState", new getExperimentState());
      processMap.put("getExperimentsState", new getExperimentsState());
      processMap.put("getExperiment", new getExperiment());
      processMap.put("createExperiment", new createExperiment());
      processMap.put("editExperiment", new editExperiment());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getExperimentState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperimentState_args> {
      public getExperimentState() {
        super("getExperimentState");
      }

      public getExperimentState_args getEmptyArgsInstance() {
        return new getExperimentState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperimentState_result getResult(I iface, getExperimentState_args args) throws org.apache.thrift.TException {
        getExperimentState_result result = new getExperimentState_result();
        try {
          result.success = iface.getExperimentState(args.experimentName);
        } catch (ExperimentNotFoundException experimentNotFoundException) {
          result.experimentNotFoundException = experimentNotFoundException;
        } catch (NullOrEmptyException nullOrEmptyException) {
          result.nullOrEmptyException = nullOrEmptyException;
        }
        return result;
      }
    }

    public static class getExperimentsState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperimentsState_args> {
      public getExperimentsState() {
        super("getExperimentsState");
      }

      public getExperimentsState_args getEmptyArgsInstance() {
        return new getExperimentsState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperimentsState_result getResult(I iface, getExperimentsState_args args) throws org.apache.thrift.TException {
        getExperimentsState_result result = new getExperimentsState_result();
        try {
          result.success = iface.getExperimentsState(args.experimentsName);
        } catch (NullOrEmptyException nullOrEmptyException) {
          result.nullOrEmptyException = nullOrEmptyException;
        }
        return result;
      }
    }

    public static class getExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperiment_args> {
      public getExperiment() {
        super("getExperiment");
      }

      public getExperiment_args getEmptyArgsInstance() {
        return new getExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperiment_result getResult(I iface, getExperiment_args args) throws org.apache.thrift.TException {
        getExperiment_result result = new getExperiment_result();
        try {
          result.success = iface.getExperiment(args.experimentName);
        } catch (ExperimentNotFoundException experimentNotFoundException) {
          result.experimentNotFoundException = experimentNotFoundException;
        } catch (NullOrEmptyException nullOrEmptyException) {
          result.nullOrEmptyException = nullOrEmptyException;
        }
        return result;
      }
    }

    public static class createExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createExperiment_args> {
      public createExperiment() {
        super("createExperiment");
      }

      public createExperiment_args getEmptyArgsInstance() {
        return new createExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createExperiment_result getResult(I iface, createExperiment_args args) throws org.apache.thrift.TException {
        createExperiment_result result = new createExperiment_result();
        try {
          result.success = iface.createExperiment(args.experiment);
          result.setSuccessIsSet(true);
        } catch (ExperimentAlreadyExistsException experimentAlreadyExistsException) {
          result.experimentAlreadyExistsException = experimentAlreadyExistsException;
        } catch (NullOrEmptyException nullOrEmptyException) {
          result.nullOrEmptyException = nullOrEmptyException;
        }
        return result;
      }
    }

    public static class editExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editExperiment_args> {
      public editExperiment() {
        super("editExperiment");
      }

      public editExperiment_args getEmptyArgsInstance() {
        return new editExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editExperiment_result getResult(I iface, editExperiment_args args) throws org.apache.thrift.TException {
        editExperiment_result result = new editExperiment_result();
        try {
          result.success = iface.editExperiment(args.experiment);
          result.setSuccessIsSet(true);
        } catch (InvalidPasscodeException invalidPasscodeException) {
          result.invalidPasscodeException = invalidPasscodeException;
        } catch (NullOrEmptyException nullOrEmptyException) {
          result.nullOrEmptyException = nullOrEmptyException;
        } catch (ExperimentNotFoundException experimentNotFoundException) {
          result.experimentNotFoundException = experimentNotFoundException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getExperimentState", new getExperimentState());
      processMap.put("getExperimentsState", new getExperimentsState());
      processMap.put("getExperiment", new getExperiment());
      processMap.put("createExperiment", new createExperiment());
      processMap.put("editExperiment", new editExperiment());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Boolean> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class getExperimentState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentState_args, String> {
      public getExperimentState() {
        super("getExperimentState");
      }

      public getExperimentState_args getEmptyArgsInstance() {
        return new getExperimentState_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getExperimentState_result result = new getExperimentState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperimentState_result result = new getExperimentState_result();
            if (e instanceof ExperimentNotFoundException) {
                        result.experimentNotFoundException = (ExperimentNotFoundException) e;
                        result.setExperimentNotFoundExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NullOrEmptyException) {
                        result.nullOrEmptyException = (NullOrEmptyException) e;
                        result.setNullOrEmptyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperimentState_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getExperimentState(args.experimentName,resultHandler);
      }
    }

    public static class getExperimentsState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentsState_args, Map<String,String>> {
      public getExperimentsState() {
        super("getExperimentsState");
      }

      public getExperimentsState_args getEmptyArgsInstance() {
        return new getExperimentsState_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getExperimentsState_result result = new getExperimentsState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperimentsState_result result = new getExperimentsState_result();
            if (e instanceof NullOrEmptyException) {
                        result.nullOrEmptyException = (NullOrEmptyException) e;
                        result.setNullOrEmptyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperimentsState_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getExperimentsState(args.experimentsName,resultHandler);
      }
    }

    public static class getExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperiment_args, Experiment> {
      public getExperiment() {
        super("getExperiment");
      }

      public getExperiment_args getEmptyArgsInstance() {
        return new getExperiment_args();
      }

      public AsyncMethodCallback<Experiment> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Experiment>() { 
          public void onComplete(Experiment o) {
            getExperiment_result result = new getExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperiment_result result = new getExperiment_result();
            if (e instanceof ExperimentNotFoundException) {
                        result.experimentNotFoundException = (ExperimentNotFoundException) e;
                        result.setExperimentNotFoundExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NullOrEmptyException) {
                        result.nullOrEmptyException = (NullOrEmptyException) e;
                        result.setNullOrEmptyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Experiment> resultHandler) throws TException {
        iface.getExperiment(args.experimentName,resultHandler);
      }
    }

    public static class createExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createExperiment_args, Boolean> {
      public createExperiment() {
        super("createExperiment");
      }

      public createExperiment_args getEmptyArgsInstance() {
        return new createExperiment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createExperiment_result result = new createExperiment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createExperiment_result result = new createExperiment_result();
            if (e instanceof ExperimentAlreadyExistsException) {
                        result.experimentAlreadyExistsException = (ExperimentAlreadyExistsException) e;
                        result.setExperimentAlreadyExistsExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NullOrEmptyException) {
                        result.nullOrEmptyException = (NullOrEmptyException) e;
                        result.setNullOrEmptyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createExperiment(args.experiment,resultHandler);
      }
    }

    public static class editExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editExperiment_args, Boolean> {
      public editExperiment() {
        super("editExperiment");
      }

      public editExperiment_args getEmptyArgsInstance() {
        return new editExperiment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            editExperiment_result result = new editExperiment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editExperiment_result result = new editExperiment_result();
            if (e instanceof InvalidPasscodeException) {
                        result.invalidPasscodeException = (InvalidPasscodeException) e;
                        result.setInvalidPasscodeExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NullOrEmptyException) {
                        result.nullOrEmptyException = (NullOrEmptyException) e;
                        result.setNullOrEmptyExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ExperimentNotFoundException) {
                        result.experimentNotFoundException = (ExperimentNotFoundException) e;
                        result.setExperimentNotFoundExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.editExperiment(args.experiment,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getExperimentState_args implements org.apache.thrift.TBase<getExperimentState_args, getExperimentState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentState_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentState_argsTupleSchemeFactory());
    }

    public String experimentName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENT_NAME((short)1, "experimentName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENT_NAME
            return EXPERIMENT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("experimentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentState_args.class, metaDataMap);
    }

    public getExperimentState_args() {
    }

    public getExperimentState_args(
      String experimentName)
    {
      this();
      this.experimentName = experimentName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentState_args(getExperimentState_args other) {
      if (other.isSetExperimentName()) {
        this.experimentName = other.experimentName;
      }
    }

    public getExperimentState_args deepCopy() {
      return new getExperimentState_args(this);
    }

    @Override
    public void clear() {
      this.experimentName = null;
    }

    public String getExperimentName() {
      return this.experimentName;
    }

    public getExperimentState_args setExperimentName(String experimentName) {
      this.experimentName = experimentName;
      return this;
    }

    public void unsetExperimentName() {
      this.experimentName = null;
    }

    /** Returns true if field experimentName is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentName() {
      return this.experimentName != null;
    }

    public void setExperimentNameIsSet(boolean value) {
      if (!value) {
        this.experimentName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENT_NAME:
        if (value == null) {
          unsetExperimentName();
        } else {
          setExperimentName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENT_NAME:
        return getExperimentName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENT_NAME:
        return isSetExperimentName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentState_args)
        return this.equals((getExperimentState_args)that);
      return false;
    }

    public boolean equals(getExperimentState_args that) {
      if (that == null)
        return false;

      boolean this_present_experimentName = true && this.isSetExperimentName();
      boolean that_present_experimentName = true && that.isSetExperimentName();
      if (this_present_experimentName || that_present_experimentName) {
        if (!(this_present_experimentName && that_present_experimentName))
          return false;
        if (!this.experimentName.equals(that.experimentName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_experimentName = true && (isSetExperimentName());
      list.add(present_experimentName);
      if (present_experimentName)
        list.add(experimentName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperimentState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperimentName()).compareTo(other.isSetExperimentName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentName, other.experimentName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentState_args(");
      boolean first = true;

      sb.append("experimentName:");
      if (this.experimentName == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentState_argsStandardSchemeFactory implements SchemeFactory {
      public getExperimentState_argsStandardScheme getScheme() {
        return new getExperimentState_argsStandardScheme();
      }
    }

    private static class getExperimentState_argsStandardScheme extends StandardScheme<getExperimentState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.experimentName = iprot.readString();
                struct.setExperimentNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.experimentName != null) {
          oprot.writeFieldBegin(EXPERIMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.experimentName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentState_argsTupleSchemeFactory implements SchemeFactory {
      public getExperimentState_argsTupleScheme getScheme() {
        return new getExperimentState_argsTupleScheme();
      }
    }

    private static class getExperimentState_argsTupleScheme extends TupleScheme<getExperimentState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExperimentName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExperimentName()) {
          oprot.writeString(struct.experimentName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.experimentName = iprot.readString();
          struct.setExperimentNameIsSet(true);
        }
      }
    }

  }

  public static class getExperimentState_result implements org.apache.thrift.TBase<getExperimentState_result, getExperimentState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentNotFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NULL_OR_EMPTY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nullOrEmptyException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentState_resultTupleSchemeFactory());
    }

    public String success; // required
    public ExperimentNotFoundException experimentNotFoundException; // required
    public NullOrEmptyException nullOrEmptyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXPERIMENT_NOT_FOUND_EXCEPTION((short)1, "experimentNotFoundException"),
      NULL_OR_EMPTY_EXCEPTION((short)2, "nullOrEmptyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXPERIMENT_NOT_FOUND_EXCEPTION
            return EXPERIMENT_NOT_FOUND_EXCEPTION;
          case 2: // NULL_OR_EMPTY_EXCEPTION
            return NULL_OR_EMPTY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPERIMENT_NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("experimentNotFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NULL_OR_EMPTY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("nullOrEmptyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentState_result.class, metaDataMap);
    }

    public getExperimentState_result() {
    }

    public getExperimentState_result(
      String success,
      ExperimentNotFoundException experimentNotFoundException,
      NullOrEmptyException nullOrEmptyException)
    {
      this();
      this.success = success;
      this.experimentNotFoundException = experimentNotFoundException;
      this.nullOrEmptyException = nullOrEmptyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentState_result(getExperimentState_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExperimentNotFoundException()) {
        this.experimentNotFoundException = new ExperimentNotFoundException(other.experimentNotFoundException);
      }
      if (other.isSetNullOrEmptyException()) {
        this.nullOrEmptyException = new NullOrEmptyException(other.nullOrEmptyException);
      }
    }

    public getExperimentState_result deepCopy() {
      return new getExperimentState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.experimentNotFoundException = null;
      this.nullOrEmptyException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getExperimentState_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ExperimentNotFoundException getExperimentNotFoundException() {
      return this.experimentNotFoundException;
    }

    public getExperimentState_result setExperimentNotFoundException(ExperimentNotFoundException experimentNotFoundException) {
      this.experimentNotFoundException = experimentNotFoundException;
      return this;
    }

    public void unsetExperimentNotFoundException() {
      this.experimentNotFoundException = null;
    }

    /** Returns true if field experimentNotFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentNotFoundException() {
      return this.experimentNotFoundException != null;
    }

    public void setExperimentNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.experimentNotFoundException = null;
      }
    }

    public NullOrEmptyException getNullOrEmptyException() {
      return this.nullOrEmptyException;
    }

    public getExperimentState_result setNullOrEmptyException(NullOrEmptyException nullOrEmptyException) {
      this.nullOrEmptyException = nullOrEmptyException;
      return this;
    }

    public void unsetNullOrEmptyException() {
      this.nullOrEmptyException = null;
    }

    /** Returns true if field nullOrEmptyException is set (has been assigned a value) and false otherwise */
    public boolean isSetNullOrEmptyException() {
      return this.nullOrEmptyException != null;
    }

    public void setNullOrEmptyExceptionIsSet(boolean value) {
      if (!value) {
        this.nullOrEmptyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetExperimentNotFoundException();
        } else {
          setExperimentNotFoundException((ExperimentNotFoundException)value);
        }
        break;

      case NULL_OR_EMPTY_EXCEPTION:
        if (value == null) {
          unsetNullOrEmptyException();
        } else {
          setNullOrEmptyException((NullOrEmptyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        return getExperimentNotFoundException();

      case NULL_OR_EMPTY_EXCEPTION:
        return getNullOrEmptyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        return isSetExperimentNotFoundException();
      case NULL_OR_EMPTY_EXCEPTION:
        return isSetNullOrEmptyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentState_result)
        return this.equals((getExperimentState_result)that);
      return false;
    }

    public boolean equals(getExperimentState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_experimentNotFoundException = true && this.isSetExperimentNotFoundException();
      boolean that_present_experimentNotFoundException = true && that.isSetExperimentNotFoundException();
      if (this_present_experimentNotFoundException || that_present_experimentNotFoundException) {
        if (!(this_present_experimentNotFoundException && that_present_experimentNotFoundException))
          return false;
        if (!this.experimentNotFoundException.equals(that.experimentNotFoundException))
          return false;
      }

      boolean this_present_nullOrEmptyException = true && this.isSetNullOrEmptyException();
      boolean that_present_nullOrEmptyException = true && that.isSetNullOrEmptyException();
      if (this_present_nullOrEmptyException || that_present_nullOrEmptyException) {
        if (!(this_present_nullOrEmptyException && that_present_nullOrEmptyException))
          return false;
        if (!this.nullOrEmptyException.equals(that.nullOrEmptyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_experimentNotFoundException = true && (isSetExperimentNotFoundException());
      list.add(present_experimentNotFoundException);
      if (present_experimentNotFoundException)
        list.add(experimentNotFoundException);

      boolean present_nullOrEmptyException = true && (isSetNullOrEmptyException());
      list.add(present_nullOrEmptyException);
      if (present_nullOrEmptyException)
        list.add(nullOrEmptyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperimentState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentNotFoundException()).compareTo(other.isSetExperimentNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentNotFoundException, other.experimentNotFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNullOrEmptyException()).compareTo(other.isSetNullOrEmptyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNullOrEmptyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullOrEmptyException, other.nullOrEmptyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentNotFoundException:");
      if (this.experimentNotFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentNotFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nullOrEmptyException:");
      if (this.nullOrEmptyException == null) {
        sb.append("null");
      } else {
        sb.append(this.nullOrEmptyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentState_resultStandardSchemeFactory implements SchemeFactory {
      public getExperimentState_resultStandardScheme getScheme() {
        return new getExperimentState_resultStandardScheme();
      }
    }

    private static class getExperimentState_resultStandardScheme extends StandardScheme<getExperimentState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXPERIMENT_NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experimentNotFoundException = new ExperimentNotFoundException();
                struct.experimentNotFoundException.read(iprot);
                struct.setExperimentNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NULL_OR_EMPTY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nullOrEmptyException = new NullOrEmptyException();
                struct.nullOrEmptyException.read(iprot);
                struct.setNullOrEmptyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.experimentNotFoundException != null) {
          oprot.writeFieldBegin(EXPERIMENT_NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.experimentNotFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nullOrEmptyException != null) {
          oprot.writeFieldBegin(NULL_OR_EMPTY_EXCEPTION_FIELD_DESC);
          struct.nullOrEmptyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentState_resultTupleSchemeFactory implements SchemeFactory {
      public getExperimentState_resultTupleScheme getScheme() {
        return new getExperimentState_resultTupleScheme();
      }
    }

    private static class getExperimentState_resultTupleScheme extends TupleScheme<getExperimentState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExperimentNotFoundException()) {
          optionals.set(1);
        }
        if (struct.isSetNullOrEmptyException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExperimentNotFoundException()) {
          struct.experimentNotFoundException.write(oprot);
        }
        if (struct.isSetNullOrEmptyException()) {
          struct.nullOrEmptyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.experimentNotFoundException = new ExperimentNotFoundException();
          struct.experimentNotFoundException.read(iprot);
          struct.setExperimentNotFoundExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nullOrEmptyException = new NullOrEmptyException();
          struct.nullOrEmptyException.read(iprot);
          struct.setNullOrEmptyExceptionIsSet(true);
        }
      }
    }

  }

  public static class getExperimentsState_args implements org.apache.thrift.TBase<getExperimentsState_args, getExperimentsState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentsState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentsState_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENTS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentsName", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentsState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentsState_argsTupleSchemeFactory());
    }

    public List<String> experimentsName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENTS_NAME((short)1, "experimentsName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENTS_NAME
            return EXPERIMENTS_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENTS_NAME, new org.apache.thrift.meta_data.FieldMetaData("experimentsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentsState_args.class, metaDataMap);
    }

    public getExperimentsState_args() {
    }

    public getExperimentsState_args(
      List<String> experimentsName)
    {
      this();
      this.experimentsName = experimentsName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentsState_args(getExperimentsState_args other) {
      if (other.isSetExperimentsName()) {
        List<String> __this__experimentsName = new ArrayList<String>(other.experimentsName);
        this.experimentsName = __this__experimentsName;
      }
    }

    public getExperimentsState_args deepCopy() {
      return new getExperimentsState_args(this);
    }

    @Override
    public void clear() {
      this.experimentsName = null;
    }

    public int getExperimentsNameSize() {
      return (this.experimentsName == null) ? 0 : this.experimentsName.size();
    }

    public java.util.Iterator<String> getExperimentsNameIterator() {
      return (this.experimentsName == null) ? null : this.experimentsName.iterator();
    }

    public void addToExperimentsName(String elem) {
      if (this.experimentsName == null) {
        this.experimentsName = new ArrayList<String>();
      }
      this.experimentsName.add(elem);
    }

    public List<String> getExperimentsName() {
      return this.experimentsName;
    }

    public getExperimentsState_args setExperimentsName(List<String> experimentsName) {
      this.experimentsName = experimentsName;
      return this;
    }

    public void unsetExperimentsName() {
      this.experimentsName = null;
    }

    /** Returns true if field experimentsName is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentsName() {
      return this.experimentsName != null;
    }

    public void setExperimentsNameIsSet(boolean value) {
      if (!value) {
        this.experimentsName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENTS_NAME:
        if (value == null) {
          unsetExperimentsName();
        } else {
          setExperimentsName((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENTS_NAME:
        return getExperimentsName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENTS_NAME:
        return isSetExperimentsName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentsState_args)
        return this.equals((getExperimentsState_args)that);
      return false;
    }

    public boolean equals(getExperimentsState_args that) {
      if (that == null)
        return false;

      boolean this_present_experimentsName = true && this.isSetExperimentsName();
      boolean that_present_experimentsName = true && that.isSetExperimentsName();
      if (this_present_experimentsName || that_present_experimentsName) {
        if (!(this_present_experimentsName && that_present_experimentsName))
          return false;
        if (!this.experimentsName.equals(that.experimentsName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_experimentsName = true && (isSetExperimentsName());
      list.add(present_experimentsName);
      if (present_experimentsName)
        list.add(experimentsName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperimentsState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperimentsName()).compareTo(other.isSetExperimentsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentsName, other.experimentsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentsState_args(");
      boolean first = true;

      sb.append("experimentsName:");
      if (this.experimentsName == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentsName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentsState_argsStandardSchemeFactory implements SchemeFactory {
      public getExperimentsState_argsStandardScheme getScheme() {
        return new getExperimentsState_argsStandardScheme();
      }
    }

    private static class getExperimentsState_argsStandardScheme extends StandardScheme<getExperimentsState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentsState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENTS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.experimentsName = new ArrayList<String>(_list10.size);
                  String _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = iprot.readString();
                    struct.experimentsName.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setExperimentsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentsState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.experimentsName != null) {
          oprot.writeFieldBegin(EXPERIMENTS_NAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.experimentsName.size()));
            for (String _iter13 : struct.experimentsName)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentsState_argsTupleSchemeFactory implements SchemeFactory {
      public getExperimentsState_argsTupleScheme getScheme() {
        return new getExperimentsState_argsTupleScheme();
      }
    }

    private static class getExperimentsState_argsTupleScheme extends TupleScheme<getExperimentsState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentsState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExperimentsName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExperimentsName()) {
          {
            oprot.writeI32(struct.experimentsName.size());
            for (String _iter14 : struct.experimentsName)
            {
              oprot.writeString(_iter14);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentsState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.experimentsName = new ArrayList<String>(_list15.size);
            String _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readString();
              struct.experimentsName.add(_elem16);
            }
          }
          struct.setExperimentsNameIsSet(true);
        }
      }
    }

  }

  public static class getExperimentsState_result implements org.apache.thrift.TBase<getExperimentsState_result, getExperimentsState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentsState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentsState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField NULL_OR_EMPTY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nullOrEmptyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentsState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentsState_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public NullOrEmptyException nullOrEmptyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NULL_OR_EMPTY_EXCEPTION((short)1, "nullOrEmptyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NULL_OR_EMPTY_EXCEPTION
            return NULL_OR_EMPTY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.NULL_OR_EMPTY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("nullOrEmptyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentsState_result.class, metaDataMap);
    }

    public getExperimentsState_result() {
    }

    public getExperimentsState_result(
      Map<String,String> success,
      NullOrEmptyException nullOrEmptyException)
    {
      this();
      this.success = success;
      this.nullOrEmptyException = nullOrEmptyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentsState_result(getExperimentsState_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetNullOrEmptyException()) {
        this.nullOrEmptyException = new NullOrEmptyException(other.nullOrEmptyException);
      }
    }

    public getExperimentsState_result deepCopy() {
      return new getExperimentsState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.nullOrEmptyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getExperimentsState_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NullOrEmptyException getNullOrEmptyException() {
      return this.nullOrEmptyException;
    }

    public getExperimentsState_result setNullOrEmptyException(NullOrEmptyException nullOrEmptyException) {
      this.nullOrEmptyException = nullOrEmptyException;
      return this;
    }

    public void unsetNullOrEmptyException() {
      this.nullOrEmptyException = null;
    }

    /** Returns true if field nullOrEmptyException is set (has been assigned a value) and false otherwise */
    public boolean isSetNullOrEmptyException() {
      return this.nullOrEmptyException != null;
    }

    public void setNullOrEmptyExceptionIsSet(boolean value) {
      if (!value) {
        this.nullOrEmptyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case NULL_OR_EMPTY_EXCEPTION:
        if (value == null) {
          unsetNullOrEmptyException();
        } else {
          setNullOrEmptyException((NullOrEmptyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NULL_OR_EMPTY_EXCEPTION:
        return getNullOrEmptyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NULL_OR_EMPTY_EXCEPTION:
        return isSetNullOrEmptyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentsState_result)
        return this.equals((getExperimentsState_result)that);
      return false;
    }

    public boolean equals(getExperimentsState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nullOrEmptyException = true && this.isSetNullOrEmptyException();
      boolean that_present_nullOrEmptyException = true && that.isSetNullOrEmptyException();
      if (this_present_nullOrEmptyException || that_present_nullOrEmptyException) {
        if (!(this_present_nullOrEmptyException && that_present_nullOrEmptyException))
          return false;
        if (!this.nullOrEmptyException.equals(that.nullOrEmptyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_nullOrEmptyException = true && (isSetNullOrEmptyException());
      list.add(present_nullOrEmptyException);
      if (present_nullOrEmptyException)
        list.add(nullOrEmptyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperimentsState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNullOrEmptyException()).compareTo(other.isSetNullOrEmptyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNullOrEmptyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullOrEmptyException, other.nullOrEmptyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentsState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nullOrEmptyException:");
      if (this.nullOrEmptyException == null) {
        sb.append("null");
      } else {
        sb.append(this.nullOrEmptyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentsState_resultStandardSchemeFactory implements SchemeFactory {
      public getExperimentsState_resultStandardScheme getScheme() {
        return new getExperimentsState_resultStandardScheme();
      }
    }

    private static class getExperimentsState_resultStandardScheme extends StandardScheme<getExperimentsState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentsState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map18.size);
                  String _key19;
                  String _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readString();
                    struct.success.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NULL_OR_EMPTY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nullOrEmptyException = new NullOrEmptyException();
                struct.nullOrEmptyException.read(iprot);
                struct.setNullOrEmptyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentsState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter22 : struct.success.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.nullOrEmptyException != null) {
          oprot.writeFieldBegin(NULL_OR_EMPTY_EXCEPTION_FIELD_DESC);
          struct.nullOrEmptyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentsState_resultTupleSchemeFactory implements SchemeFactory {
      public getExperimentsState_resultTupleScheme getScheme() {
        return new getExperimentsState_resultTupleScheme();
      }
    }

    private static class getExperimentsState_resultTupleScheme extends TupleScheme<getExperimentsState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentsState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNullOrEmptyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter23 : struct.success.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
        if (struct.isSetNullOrEmptyException()) {
          struct.nullOrEmptyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentsState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map24.size);
            String _key25;
            String _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readString();
              struct.success.put(_key25, _val26);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nullOrEmptyException = new NullOrEmptyException();
          struct.nullOrEmptyException.read(iprot);
          struct.setNullOrEmptyExceptionIsSet(true);
        }
      }
    }

  }

  public static class getExperiment_args implements org.apache.thrift.TBase<getExperiment_args, getExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperiment_argsTupleSchemeFactory());
    }

    public String experimentName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENT_NAME((short)1, "experimentName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENT_NAME
            return EXPERIMENT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("experimentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_args.class, metaDataMap);
    }

    public getExperiment_args() {
    }

    public getExperiment_args(
      String experimentName)
    {
      this();
      this.experimentName = experimentName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperiment_args(getExperiment_args other) {
      if (other.isSetExperimentName()) {
        this.experimentName = other.experimentName;
      }
    }

    public getExperiment_args deepCopy() {
      return new getExperiment_args(this);
    }

    @Override
    public void clear() {
      this.experimentName = null;
    }

    public String getExperimentName() {
      return this.experimentName;
    }

    public getExperiment_args setExperimentName(String experimentName) {
      this.experimentName = experimentName;
      return this;
    }

    public void unsetExperimentName() {
      this.experimentName = null;
    }

    /** Returns true if field experimentName is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentName() {
      return this.experimentName != null;
    }

    public void setExperimentNameIsSet(boolean value) {
      if (!value) {
        this.experimentName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENT_NAME:
        if (value == null) {
          unsetExperimentName();
        } else {
          setExperimentName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENT_NAME:
        return getExperimentName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENT_NAME:
        return isSetExperimentName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperiment_args)
        return this.equals((getExperiment_args)that);
      return false;
    }

    public boolean equals(getExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_experimentName = true && this.isSetExperimentName();
      boolean that_present_experimentName = true && that.isSetExperimentName();
      if (this_present_experimentName || that_present_experimentName) {
        if (!(this_present_experimentName && that_present_experimentName))
          return false;
        if (!this.experimentName.equals(that.experimentName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_experimentName = true && (isSetExperimentName());
      list.add(present_experimentName);
      if (present_experimentName)
        list.add(experimentName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperimentName()).compareTo(other.isSetExperimentName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentName, other.experimentName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperiment_args(");
      boolean first = true;

      sb.append("experimentName:");
      if (this.experimentName == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public getExperiment_argsStandardScheme getScheme() {
        return new getExperiment_argsStandardScheme();
      }
    }

    private static class getExperiment_argsStandardScheme extends StandardScheme<getExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.experimentName = iprot.readString();
                struct.setExperimentNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.experimentName != null) {
          oprot.writeFieldBegin(EXPERIMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.experimentName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public getExperiment_argsTupleScheme getScheme() {
        return new getExperiment_argsTupleScheme();
      }
    }

    private static class getExperiment_argsTupleScheme extends TupleScheme<getExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExperimentName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExperimentName()) {
          oprot.writeString(struct.experimentName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.experimentName = iprot.readString();
          struct.setExperimentNameIsSet(true);
        }
      }
    }

  }

  public static class getExperiment_result implements org.apache.thrift.TBase<getExperiment_result, getExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentNotFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NULL_OR_EMPTY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nullOrEmptyException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperiment_resultTupleSchemeFactory());
    }

    public Experiment success; // required
    public ExperimentNotFoundException experimentNotFoundException; // required
    public NullOrEmptyException nullOrEmptyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXPERIMENT_NOT_FOUND_EXCEPTION((short)1, "experimentNotFoundException"),
      NULL_OR_EMPTY_EXCEPTION((short)2, "nullOrEmptyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXPERIMENT_NOT_FOUND_EXCEPTION
            return EXPERIMENT_NOT_FOUND_EXCEPTION;
          case 2: // NULL_OR_EMPTY_EXCEPTION
            return NULL_OR_EMPTY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Experiment.class)));
      tmpMap.put(_Fields.EXPERIMENT_NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("experimentNotFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NULL_OR_EMPTY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("nullOrEmptyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_result.class, metaDataMap);
    }

    public getExperiment_result() {
    }

    public getExperiment_result(
      Experiment success,
      ExperimentNotFoundException experimentNotFoundException,
      NullOrEmptyException nullOrEmptyException)
    {
      this();
      this.success = success;
      this.experimentNotFoundException = experimentNotFoundException;
      this.nullOrEmptyException = nullOrEmptyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperiment_result(getExperiment_result other) {
      if (other.isSetSuccess()) {
        this.success = new Experiment(other.success);
      }
      if (other.isSetExperimentNotFoundException()) {
        this.experimentNotFoundException = new ExperimentNotFoundException(other.experimentNotFoundException);
      }
      if (other.isSetNullOrEmptyException()) {
        this.nullOrEmptyException = new NullOrEmptyException(other.nullOrEmptyException);
      }
    }

    public getExperiment_result deepCopy() {
      return new getExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.experimentNotFoundException = null;
      this.nullOrEmptyException = null;
    }

    public Experiment getSuccess() {
      return this.success;
    }

    public getExperiment_result setSuccess(Experiment success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ExperimentNotFoundException getExperimentNotFoundException() {
      return this.experimentNotFoundException;
    }

    public getExperiment_result setExperimentNotFoundException(ExperimentNotFoundException experimentNotFoundException) {
      this.experimentNotFoundException = experimentNotFoundException;
      return this;
    }

    public void unsetExperimentNotFoundException() {
      this.experimentNotFoundException = null;
    }

    /** Returns true if field experimentNotFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentNotFoundException() {
      return this.experimentNotFoundException != null;
    }

    public void setExperimentNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.experimentNotFoundException = null;
      }
    }

    public NullOrEmptyException getNullOrEmptyException() {
      return this.nullOrEmptyException;
    }

    public getExperiment_result setNullOrEmptyException(NullOrEmptyException nullOrEmptyException) {
      this.nullOrEmptyException = nullOrEmptyException;
      return this;
    }

    public void unsetNullOrEmptyException() {
      this.nullOrEmptyException = null;
    }

    /** Returns true if field nullOrEmptyException is set (has been assigned a value) and false otherwise */
    public boolean isSetNullOrEmptyException() {
      return this.nullOrEmptyException != null;
    }

    public void setNullOrEmptyExceptionIsSet(boolean value) {
      if (!value) {
        this.nullOrEmptyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Experiment)value);
        }
        break;

      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetExperimentNotFoundException();
        } else {
          setExperimentNotFoundException((ExperimentNotFoundException)value);
        }
        break;

      case NULL_OR_EMPTY_EXCEPTION:
        if (value == null) {
          unsetNullOrEmptyException();
        } else {
          setNullOrEmptyException((NullOrEmptyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        return getExperimentNotFoundException();

      case NULL_OR_EMPTY_EXCEPTION:
        return getNullOrEmptyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        return isSetExperimentNotFoundException();
      case NULL_OR_EMPTY_EXCEPTION:
        return isSetNullOrEmptyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperiment_result)
        return this.equals((getExperiment_result)that);
      return false;
    }

    public boolean equals(getExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_experimentNotFoundException = true && this.isSetExperimentNotFoundException();
      boolean that_present_experimentNotFoundException = true && that.isSetExperimentNotFoundException();
      if (this_present_experimentNotFoundException || that_present_experimentNotFoundException) {
        if (!(this_present_experimentNotFoundException && that_present_experimentNotFoundException))
          return false;
        if (!this.experimentNotFoundException.equals(that.experimentNotFoundException))
          return false;
      }

      boolean this_present_nullOrEmptyException = true && this.isSetNullOrEmptyException();
      boolean that_present_nullOrEmptyException = true && that.isSetNullOrEmptyException();
      if (this_present_nullOrEmptyException || that_present_nullOrEmptyException) {
        if (!(this_present_nullOrEmptyException && that_present_nullOrEmptyException))
          return false;
        if (!this.nullOrEmptyException.equals(that.nullOrEmptyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_experimentNotFoundException = true && (isSetExperimentNotFoundException());
      list.add(present_experimentNotFoundException);
      if (present_experimentNotFoundException)
        list.add(experimentNotFoundException);

      boolean present_nullOrEmptyException = true && (isSetNullOrEmptyException());
      list.add(present_nullOrEmptyException);
      if (present_nullOrEmptyException)
        list.add(nullOrEmptyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentNotFoundException()).compareTo(other.isSetExperimentNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentNotFoundException, other.experimentNotFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNullOrEmptyException()).compareTo(other.isSetNullOrEmptyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNullOrEmptyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullOrEmptyException, other.nullOrEmptyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentNotFoundException:");
      if (this.experimentNotFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentNotFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nullOrEmptyException:");
      if (this.nullOrEmptyException == null) {
        sb.append("null");
      } else {
        sb.append(this.nullOrEmptyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public getExperiment_resultStandardScheme getScheme() {
        return new getExperiment_resultStandardScheme();
      }
    }

    private static class getExperiment_resultStandardScheme extends StandardScheme<getExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Experiment();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXPERIMENT_NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experimentNotFoundException = new ExperimentNotFoundException();
                struct.experimentNotFoundException.read(iprot);
                struct.setExperimentNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NULL_OR_EMPTY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nullOrEmptyException = new NullOrEmptyException();
                struct.nullOrEmptyException.read(iprot);
                struct.setNullOrEmptyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.experimentNotFoundException != null) {
          oprot.writeFieldBegin(EXPERIMENT_NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.experimentNotFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nullOrEmptyException != null) {
          oprot.writeFieldBegin(NULL_OR_EMPTY_EXCEPTION_FIELD_DESC);
          struct.nullOrEmptyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public getExperiment_resultTupleScheme getScheme() {
        return new getExperiment_resultTupleScheme();
      }
    }

    private static class getExperiment_resultTupleScheme extends TupleScheme<getExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExperimentNotFoundException()) {
          optionals.set(1);
        }
        if (struct.isSetNullOrEmptyException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExperimentNotFoundException()) {
          struct.experimentNotFoundException.write(oprot);
        }
        if (struct.isSetNullOrEmptyException()) {
          struct.nullOrEmptyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Experiment();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.experimentNotFoundException = new ExperimentNotFoundException();
          struct.experimentNotFoundException.read(iprot);
          struct.setExperimentNotFoundExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nullOrEmptyException = new NullOrEmptyException();
          struct.nullOrEmptyException.read(iprot);
          struct.setNullOrEmptyExceptionIsSet(true);
        }
      }
    }

  }

  public static class createExperiment_args implements org.apache.thrift.TBase<createExperiment_args, createExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExperiment_argsTupleSchemeFactory());
    }

    public Experiment experiment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENT((short)1, "experiment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENT
            return EXPERIMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Experiment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_args.class, metaDataMap);
    }

    public createExperiment_args() {
    }

    public createExperiment_args(
      Experiment experiment)
    {
      this();
      this.experiment = experiment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExperiment_args(createExperiment_args other) {
      if (other.isSetExperiment()) {
        this.experiment = new Experiment(other.experiment);
      }
    }

    public createExperiment_args deepCopy() {
      return new createExperiment_args(this);
    }

    @Override
    public void clear() {
      this.experiment = null;
    }

    public Experiment getExperiment() {
      return this.experiment;
    }

    public createExperiment_args setExperiment(Experiment experiment) {
      this.experiment = experiment;
      return this;
    }

    public void unsetExperiment() {
      this.experiment = null;
    }

    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
    public boolean isSetExperiment() {
      return this.experiment != null;
    }

    public void setExperimentIsSet(boolean value) {
      if (!value) {
        this.experiment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENT:
        if (value == null) {
          unsetExperiment();
        } else {
          setExperiment((Experiment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENT:
        return getExperiment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENT:
        return isSetExperiment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExperiment_args)
        return this.equals((createExperiment_args)that);
      return false;
    }

    public boolean equals(createExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_experiment = true && this.isSetExperiment();
      boolean that_present_experiment = true && that.isSetExperiment();
      if (this_present_experiment || that_present_experiment) {
        if (!(this_present_experiment && that_present_experiment))
          return false;
        if (!this.experiment.equals(that.experiment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_experiment = true && (isSetExperiment());
      list.add(present_experiment);
      if (present_experiment)
        list.add(experiment);

      return list.hashCode();
    }

    @Override
    public int compareTo(createExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperiment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExperiment_args(");
      boolean first = true;

      sb.append("experiment:");
      if (this.experiment == null) {
        sb.append("null");
      } else {
        sb.append(this.experiment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (experiment != null) {
        experiment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public createExperiment_argsStandardScheme getScheme() {
        return new createExperiment_argsStandardScheme();
      }
    }

    private static class createExperiment_argsStandardScheme extends StandardScheme<createExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experiment = new Experiment();
                struct.experiment.read(iprot);
                struct.setExperimentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.experiment != null) {
          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
          struct.experiment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public createExperiment_argsTupleScheme getScheme() {
        return new createExperiment_argsTupleScheme();
      }
    }

    private static class createExperiment_argsTupleScheme extends TupleScheme<createExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExperiment()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExperiment()) {
          struct.experiment.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.experiment = new Experiment();
          struct.experiment.read(iprot);
          struct.setExperimentIsSet(true);
        }
      }
    }

  }

  public static class createExperiment_result implements org.apache.thrift.TBase<createExperiment_result, createExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_ALREADY_EXISTS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentAlreadyExistsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NULL_OR_EMPTY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nullOrEmptyException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExperiment_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ExperimentAlreadyExistsException experimentAlreadyExistsException; // required
    public NullOrEmptyException nullOrEmptyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXPERIMENT_ALREADY_EXISTS_EXCEPTION((short)1, "experimentAlreadyExistsException"),
      NULL_OR_EMPTY_EXCEPTION((short)2, "nullOrEmptyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXPERIMENT_ALREADY_EXISTS_EXCEPTION
            return EXPERIMENT_ALREADY_EXISTS_EXCEPTION;
          case 2: // NULL_OR_EMPTY_EXCEPTION
            return NULL_OR_EMPTY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXPERIMENT_ALREADY_EXISTS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("experimentAlreadyExistsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NULL_OR_EMPTY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("nullOrEmptyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_result.class, metaDataMap);
    }

    public createExperiment_result() {
    }

    public createExperiment_result(
      boolean success,
      ExperimentAlreadyExistsException experimentAlreadyExistsException,
      NullOrEmptyException nullOrEmptyException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.experimentAlreadyExistsException = experimentAlreadyExistsException;
      this.nullOrEmptyException = nullOrEmptyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExperiment_result(createExperiment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExperimentAlreadyExistsException()) {
        this.experimentAlreadyExistsException = new ExperimentAlreadyExistsException(other.experimentAlreadyExistsException);
      }
      if (other.isSetNullOrEmptyException()) {
        this.nullOrEmptyException = new NullOrEmptyException(other.nullOrEmptyException);
      }
    }

    public createExperiment_result deepCopy() {
      return new createExperiment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.experimentAlreadyExistsException = null;
      this.nullOrEmptyException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createExperiment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ExperimentAlreadyExistsException getExperimentAlreadyExistsException() {
      return this.experimentAlreadyExistsException;
    }

    public createExperiment_result setExperimentAlreadyExistsException(ExperimentAlreadyExistsException experimentAlreadyExistsException) {
      this.experimentAlreadyExistsException = experimentAlreadyExistsException;
      return this;
    }

    public void unsetExperimentAlreadyExistsException() {
      this.experimentAlreadyExistsException = null;
    }

    /** Returns true if field experimentAlreadyExistsException is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentAlreadyExistsException() {
      return this.experimentAlreadyExistsException != null;
    }

    public void setExperimentAlreadyExistsExceptionIsSet(boolean value) {
      if (!value) {
        this.experimentAlreadyExistsException = null;
      }
    }

    public NullOrEmptyException getNullOrEmptyException() {
      return this.nullOrEmptyException;
    }

    public createExperiment_result setNullOrEmptyException(NullOrEmptyException nullOrEmptyException) {
      this.nullOrEmptyException = nullOrEmptyException;
      return this;
    }

    public void unsetNullOrEmptyException() {
      this.nullOrEmptyException = null;
    }

    /** Returns true if field nullOrEmptyException is set (has been assigned a value) and false otherwise */
    public boolean isSetNullOrEmptyException() {
      return this.nullOrEmptyException != null;
    }

    public void setNullOrEmptyExceptionIsSet(boolean value) {
      if (!value) {
        this.nullOrEmptyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXPERIMENT_ALREADY_EXISTS_EXCEPTION:
        if (value == null) {
          unsetExperimentAlreadyExistsException();
        } else {
          setExperimentAlreadyExistsException((ExperimentAlreadyExistsException)value);
        }
        break;

      case NULL_OR_EMPTY_EXCEPTION:
        if (value == null) {
          unsetNullOrEmptyException();
        } else {
          setNullOrEmptyException((NullOrEmptyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXPERIMENT_ALREADY_EXISTS_EXCEPTION:
        return getExperimentAlreadyExistsException();

      case NULL_OR_EMPTY_EXCEPTION:
        return getNullOrEmptyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXPERIMENT_ALREADY_EXISTS_EXCEPTION:
        return isSetExperimentAlreadyExistsException();
      case NULL_OR_EMPTY_EXCEPTION:
        return isSetNullOrEmptyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExperiment_result)
        return this.equals((createExperiment_result)that);
      return false;
    }

    public boolean equals(createExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_experimentAlreadyExistsException = true && this.isSetExperimentAlreadyExistsException();
      boolean that_present_experimentAlreadyExistsException = true && that.isSetExperimentAlreadyExistsException();
      if (this_present_experimentAlreadyExistsException || that_present_experimentAlreadyExistsException) {
        if (!(this_present_experimentAlreadyExistsException && that_present_experimentAlreadyExistsException))
          return false;
        if (!this.experimentAlreadyExistsException.equals(that.experimentAlreadyExistsException))
          return false;
      }

      boolean this_present_nullOrEmptyException = true && this.isSetNullOrEmptyException();
      boolean that_present_nullOrEmptyException = true && that.isSetNullOrEmptyException();
      if (this_present_nullOrEmptyException || that_present_nullOrEmptyException) {
        if (!(this_present_nullOrEmptyException && that_present_nullOrEmptyException))
          return false;
        if (!this.nullOrEmptyException.equals(that.nullOrEmptyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_experimentAlreadyExistsException = true && (isSetExperimentAlreadyExistsException());
      list.add(present_experimentAlreadyExistsException);
      if (present_experimentAlreadyExistsException)
        list.add(experimentAlreadyExistsException);

      boolean present_nullOrEmptyException = true && (isSetNullOrEmptyException());
      list.add(present_nullOrEmptyException);
      if (present_nullOrEmptyException)
        list.add(nullOrEmptyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(createExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentAlreadyExistsException()).compareTo(other.isSetExperimentAlreadyExistsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentAlreadyExistsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentAlreadyExistsException, other.experimentAlreadyExistsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNullOrEmptyException()).compareTo(other.isSetNullOrEmptyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNullOrEmptyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullOrEmptyException, other.nullOrEmptyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExperiment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentAlreadyExistsException:");
      if (this.experimentAlreadyExistsException == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentAlreadyExistsException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nullOrEmptyException:");
      if (this.nullOrEmptyException == null) {
        sb.append("null");
      } else {
        sb.append(this.nullOrEmptyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public createExperiment_resultStandardScheme getScheme() {
        return new createExperiment_resultStandardScheme();
      }
    }

    private static class createExperiment_resultStandardScheme extends StandardScheme<createExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXPERIMENT_ALREADY_EXISTS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experimentAlreadyExistsException = new ExperimentAlreadyExistsException();
                struct.experimentAlreadyExistsException.read(iprot);
                struct.setExperimentAlreadyExistsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NULL_OR_EMPTY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nullOrEmptyException = new NullOrEmptyException();
                struct.nullOrEmptyException.read(iprot);
                struct.setNullOrEmptyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.experimentAlreadyExistsException != null) {
          oprot.writeFieldBegin(EXPERIMENT_ALREADY_EXISTS_EXCEPTION_FIELD_DESC);
          struct.experimentAlreadyExistsException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nullOrEmptyException != null) {
          oprot.writeFieldBegin(NULL_OR_EMPTY_EXCEPTION_FIELD_DESC);
          struct.nullOrEmptyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public createExperiment_resultTupleScheme getScheme() {
        return new createExperiment_resultTupleScheme();
      }
    }

    private static class createExperiment_resultTupleScheme extends TupleScheme<createExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExperimentAlreadyExistsException()) {
          optionals.set(1);
        }
        if (struct.isSetNullOrEmptyException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExperimentAlreadyExistsException()) {
          struct.experimentAlreadyExistsException.write(oprot);
        }
        if (struct.isSetNullOrEmptyException()) {
          struct.nullOrEmptyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.experimentAlreadyExistsException = new ExperimentAlreadyExistsException();
          struct.experimentAlreadyExistsException.read(iprot);
          struct.setExperimentAlreadyExistsExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nullOrEmptyException = new NullOrEmptyException();
          struct.nullOrEmptyException.read(iprot);
          struct.setNullOrEmptyExceptionIsSet(true);
        }
      }
    }

  }

  public static class editExperiment_args implements org.apache.thrift.TBase<editExperiment_args, editExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<editExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editExperiment_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editExperiment_argsTupleSchemeFactory());
    }

    public Experiment experiment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENT((short)1, "experiment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENT
            return EXPERIMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Experiment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editExperiment_args.class, metaDataMap);
    }

    public editExperiment_args() {
    }

    public editExperiment_args(
      Experiment experiment)
    {
      this();
      this.experiment = experiment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editExperiment_args(editExperiment_args other) {
      if (other.isSetExperiment()) {
        this.experiment = new Experiment(other.experiment);
      }
    }

    public editExperiment_args deepCopy() {
      return new editExperiment_args(this);
    }

    @Override
    public void clear() {
      this.experiment = null;
    }

    public Experiment getExperiment() {
      return this.experiment;
    }

    public editExperiment_args setExperiment(Experiment experiment) {
      this.experiment = experiment;
      return this;
    }

    public void unsetExperiment() {
      this.experiment = null;
    }

    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
    public boolean isSetExperiment() {
      return this.experiment != null;
    }

    public void setExperimentIsSet(boolean value) {
      if (!value) {
        this.experiment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENT:
        if (value == null) {
          unsetExperiment();
        } else {
          setExperiment((Experiment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENT:
        return getExperiment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENT:
        return isSetExperiment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editExperiment_args)
        return this.equals((editExperiment_args)that);
      return false;
    }

    public boolean equals(editExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_experiment = true && this.isSetExperiment();
      boolean that_present_experiment = true && that.isSetExperiment();
      if (this_present_experiment || that_present_experiment) {
        if (!(this_present_experiment && that_present_experiment))
          return false;
        if (!this.experiment.equals(that.experiment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_experiment = true && (isSetExperiment());
      list.add(present_experiment);
      if (present_experiment)
        list.add(experiment);

      return list.hashCode();
    }

    @Override
    public int compareTo(editExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperiment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editExperiment_args(");
      boolean first = true;

      sb.append("experiment:");
      if (this.experiment == null) {
        sb.append("null");
      } else {
        sb.append(this.experiment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (experiment != null) {
        experiment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public editExperiment_argsStandardScheme getScheme() {
        return new editExperiment_argsStandardScheme();
      }
    }

    private static class editExperiment_argsStandardScheme extends StandardScheme<editExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experiment = new Experiment();
                struct.experiment.read(iprot);
                struct.setExperimentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.experiment != null) {
          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
          struct.experiment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public editExperiment_argsTupleScheme getScheme() {
        return new editExperiment_argsTupleScheme();
      }
    }

    private static class editExperiment_argsTupleScheme extends TupleScheme<editExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExperiment()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExperiment()) {
          struct.experiment.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.experiment = new Experiment();
          struct.experiment.read(iprot);
          struct.setExperimentIsSet(true);
        }
      }
    }

  }

  public static class editExperiment_result implements org.apache.thrift.TBase<editExperiment_result, editExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<editExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_PASSCODE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidPasscodeException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NULL_OR_EMPTY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nullOrEmptyException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentNotFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editExperiment_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public InvalidPasscodeException invalidPasscodeException; // required
    public NullOrEmptyException nullOrEmptyException; // required
    public ExperimentNotFoundException experimentNotFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID_PASSCODE_EXCEPTION((short)1, "invalidPasscodeException"),
      NULL_OR_EMPTY_EXCEPTION((short)2, "nullOrEmptyException"),
      EXPERIMENT_NOT_FOUND_EXCEPTION((short)3, "experimentNotFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID_PASSCODE_EXCEPTION
            return INVALID_PASSCODE_EXCEPTION;
          case 2: // NULL_OR_EMPTY_EXCEPTION
            return NULL_OR_EMPTY_EXCEPTION;
          case 3: // EXPERIMENT_NOT_FOUND_EXCEPTION
            return EXPERIMENT_NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.INVALID_PASSCODE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("invalidPasscodeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NULL_OR_EMPTY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("nullOrEmptyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXPERIMENT_NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("experimentNotFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editExperiment_result.class, metaDataMap);
    }

    public editExperiment_result() {
    }

    public editExperiment_result(
      boolean success,
      InvalidPasscodeException invalidPasscodeException,
      NullOrEmptyException nullOrEmptyException,
      ExperimentNotFoundException experimentNotFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.invalidPasscodeException = invalidPasscodeException;
      this.nullOrEmptyException = nullOrEmptyException;
      this.experimentNotFoundException = experimentNotFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editExperiment_result(editExperiment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetInvalidPasscodeException()) {
        this.invalidPasscodeException = new InvalidPasscodeException(other.invalidPasscodeException);
      }
      if (other.isSetNullOrEmptyException()) {
        this.nullOrEmptyException = new NullOrEmptyException(other.nullOrEmptyException);
      }
      if (other.isSetExperimentNotFoundException()) {
        this.experimentNotFoundException = new ExperimentNotFoundException(other.experimentNotFoundException);
      }
    }

    public editExperiment_result deepCopy() {
      return new editExperiment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.invalidPasscodeException = null;
      this.nullOrEmptyException = null;
      this.experimentNotFoundException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public editExperiment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidPasscodeException getInvalidPasscodeException() {
      return this.invalidPasscodeException;
    }

    public editExperiment_result setInvalidPasscodeException(InvalidPasscodeException invalidPasscodeException) {
      this.invalidPasscodeException = invalidPasscodeException;
      return this;
    }

    public void unsetInvalidPasscodeException() {
      this.invalidPasscodeException = null;
    }

    /** Returns true if field invalidPasscodeException is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidPasscodeException() {
      return this.invalidPasscodeException != null;
    }

    public void setInvalidPasscodeExceptionIsSet(boolean value) {
      if (!value) {
        this.invalidPasscodeException = null;
      }
    }

    public NullOrEmptyException getNullOrEmptyException() {
      return this.nullOrEmptyException;
    }

    public editExperiment_result setNullOrEmptyException(NullOrEmptyException nullOrEmptyException) {
      this.nullOrEmptyException = nullOrEmptyException;
      return this;
    }

    public void unsetNullOrEmptyException() {
      this.nullOrEmptyException = null;
    }

    /** Returns true if field nullOrEmptyException is set (has been assigned a value) and false otherwise */
    public boolean isSetNullOrEmptyException() {
      return this.nullOrEmptyException != null;
    }

    public void setNullOrEmptyExceptionIsSet(boolean value) {
      if (!value) {
        this.nullOrEmptyException = null;
      }
    }

    public ExperimentNotFoundException getExperimentNotFoundException() {
      return this.experimentNotFoundException;
    }

    public editExperiment_result setExperimentNotFoundException(ExperimentNotFoundException experimentNotFoundException) {
      this.experimentNotFoundException = experimentNotFoundException;
      return this;
    }

    public void unsetExperimentNotFoundException() {
      this.experimentNotFoundException = null;
    }

    /** Returns true if field experimentNotFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentNotFoundException() {
      return this.experimentNotFoundException != null;
    }

    public void setExperimentNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.experimentNotFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case INVALID_PASSCODE_EXCEPTION:
        if (value == null) {
          unsetInvalidPasscodeException();
        } else {
          setInvalidPasscodeException((InvalidPasscodeException)value);
        }
        break;

      case NULL_OR_EMPTY_EXCEPTION:
        if (value == null) {
          unsetNullOrEmptyException();
        } else {
          setNullOrEmptyException((NullOrEmptyException)value);
        }
        break;

      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetExperimentNotFoundException();
        } else {
          setExperimentNotFoundException((ExperimentNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case INVALID_PASSCODE_EXCEPTION:
        return getInvalidPasscodeException();

      case NULL_OR_EMPTY_EXCEPTION:
        return getNullOrEmptyException();

      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        return getExperimentNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID_PASSCODE_EXCEPTION:
        return isSetInvalidPasscodeException();
      case NULL_OR_EMPTY_EXCEPTION:
        return isSetNullOrEmptyException();
      case EXPERIMENT_NOT_FOUND_EXCEPTION:
        return isSetExperimentNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editExperiment_result)
        return this.equals((editExperiment_result)that);
      return false;
    }

    public boolean equals(editExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_invalidPasscodeException = true && this.isSetInvalidPasscodeException();
      boolean that_present_invalidPasscodeException = true && that.isSetInvalidPasscodeException();
      if (this_present_invalidPasscodeException || that_present_invalidPasscodeException) {
        if (!(this_present_invalidPasscodeException && that_present_invalidPasscodeException))
          return false;
        if (!this.invalidPasscodeException.equals(that.invalidPasscodeException))
          return false;
      }

      boolean this_present_nullOrEmptyException = true && this.isSetNullOrEmptyException();
      boolean that_present_nullOrEmptyException = true && that.isSetNullOrEmptyException();
      if (this_present_nullOrEmptyException || that_present_nullOrEmptyException) {
        if (!(this_present_nullOrEmptyException && that_present_nullOrEmptyException))
          return false;
        if (!this.nullOrEmptyException.equals(that.nullOrEmptyException))
          return false;
      }

      boolean this_present_experimentNotFoundException = true && this.isSetExperimentNotFoundException();
      boolean that_present_experimentNotFoundException = true && that.isSetExperimentNotFoundException();
      if (this_present_experimentNotFoundException || that_present_experimentNotFoundException) {
        if (!(this_present_experimentNotFoundException && that_present_experimentNotFoundException))
          return false;
        if (!this.experimentNotFoundException.equals(that.experimentNotFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_invalidPasscodeException = true && (isSetInvalidPasscodeException());
      list.add(present_invalidPasscodeException);
      if (present_invalidPasscodeException)
        list.add(invalidPasscodeException);

      boolean present_nullOrEmptyException = true && (isSetNullOrEmptyException());
      list.add(present_nullOrEmptyException);
      if (present_nullOrEmptyException)
        list.add(nullOrEmptyException);

      boolean present_experimentNotFoundException = true && (isSetExperimentNotFoundException());
      list.add(present_experimentNotFoundException);
      if (present_experimentNotFoundException)
        list.add(experimentNotFoundException);

      return list.hashCode();
    }

    @Override
    public int compareTo(editExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvalidPasscodeException()).compareTo(other.isSetInvalidPasscodeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidPasscodeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidPasscodeException, other.invalidPasscodeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNullOrEmptyException()).compareTo(other.isSetNullOrEmptyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNullOrEmptyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullOrEmptyException, other.nullOrEmptyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentNotFoundException()).compareTo(other.isSetExperimentNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentNotFoundException, other.experimentNotFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editExperiment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidPasscodeException:");
      if (this.invalidPasscodeException == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidPasscodeException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nullOrEmptyException:");
      if (this.nullOrEmptyException == null) {
        sb.append("null");
      } else {
        sb.append(this.nullOrEmptyException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentNotFoundException:");
      if (this.experimentNotFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentNotFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public editExperiment_resultStandardScheme getScheme() {
        return new editExperiment_resultStandardScheme();
      }
    }

    private static class editExperiment_resultStandardScheme extends StandardScheme<editExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID_PASSCODE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidPasscodeException = new InvalidPasscodeException();
                struct.invalidPasscodeException.read(iprot);
                struct.setInvalidPasscodeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NULL_OR_EMPTY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nullOrEmptyException = new NullOrEmptyException();
                struct.nullOrEmptyException.read(iprot);
                struct.setNullOrEmptyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXPERIMENT_NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experimentNotFoundException = new ExperimentNotFoundException();
                struct.experimentNotFoundException.read(iprot);
                struct.setExperimentNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.invalidPasscodeException != null) {
          oprot.writeFieldBegin(INVALID_PASSCODE_EXCEPTION_FIELD_DESC);
          struct.invalidPasscodeException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nullOrEmptyException != null) {
          oprot.writeFieldBegin(NULL_OR_EMPTY_EXCEPTION_FIELD_DESC);
          struct.nullOrEmptyException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.experimentNotFoundException != null) {
          oprot.writeFieldBegin(EXPERIMENT_NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.experimentNotFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public editExperiment_resultTupleScheme getScheme() {
        return new editExperiment_resultTupleScheme();
      }
    }

    private static class editExperiment_resultTupleScheme extends TupleScheme<editExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalidPasscodeException()) {
          optionals.set(1);
        }
        if (struct.isSetNullOrEmptyException()) {
          optionals.set(2);
        }
        if (struct.isSetExperimentNotFoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetInvalidPasscodeException()) {
          struct.invalidPasscodeException.write(oprot);
        }
        if (struct.isSetNullOrEmptyException()) {
          struct.nullOrEmptyException.write(oprot);
        }
        if (struct.isSetExperimentNotFoundException()) {
          struct.experimentNotFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalidPasscodeException = new InvalidPasscodeException();
          struct.invalidPasscodeException.read(iprot);
          struct.setInvalidPasscodeExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nullOrEmptyException = new NullOrEmptyException();
          struct.nullOrEmptyException.read(iprot);
          struct.setNullOrEmptyExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.experimentNotFoundException = new ExperimentNotFoundException();
          struct.experimentNotFoundException.read(iprot);
          struct.setExperimentNotFoundExceptionIsSet(true);
        }
      }
    }

  }

}
