/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vswamy.ab_testing;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-25")
public class Experiment implements org.apache.thrift.TBase<Experiment, Experiment._Fields>, java.io.Serializable, Cloneable, Comparable<Experiment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Experiment");

  private static final org.apache.thrift.protocol.TField EXPERIMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_WEIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("stateWeights", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTHOR_EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("authorEmailAddress", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PASSCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("passcode", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExperimentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExperimentTupleSchemeFactory());
  }

  public String experimentName; // required
  public Map<String,Integer> stateWeights; // required
  public String authorName; // required
  public String authorEmailAddress; // required
  public String passcode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPERIMENT_NAME((short)1, "experimentName"),
    STATE_WEIGHTS((short)2, "stateWeights"),
    AUTHOR_NAME((short)3, "authorName"),
    AUTHOR_EMAIL_ADDRESS((short)4, "authorEmailAddress"),
    PASSCODE((short)5, "passcode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPERIMENT_NAME
          return EXPERIMENT_NAME;
        case 2: // STATE_WEIGHTS
          return STATE_WEIGHTS;
        case 3: // AUTHOR_NAME
          return AUTHOR_NAME;
        case 4: // AUTHOR_EMAIL_ADDRESS
          return AUTHOR_EMAIL_ADDRESS;
        case 5: // PASSCODE
          return PASSCODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPERIMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("experimentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE_WEIGHTS, new org.apache.thrift.meta_data.FieldMetaData("stateWeights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR_EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("authorEmailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSCODE, new org.apache.thrift.meta_data.FieldMetaData("passcode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Experiment.class, metaDataMap);
  }

  public Experiment() {
  }

  public Experiment(
    String experimentName,
    Map<String,Integer> stateWeights,
    String authorName,
    String authorEmailAddress,
    String passcode)
  {
    this();
    this.experimentName = experimentName;
    this.stateWeights = stateWeights;
    this.authorName = authorName;
    this.authorEmailAddress = authorEmailAddress;
    this.passcode = passcode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Experiment(Experiment other) {
    if (other.isSetExperimentName()) {
      this.experimentName = other.experimentName;
    }
    if (other.isSetStateWeights()) {
      Map<String,Integer> __this__stateWeights = new HashMap<String,Integer>(other.stateWeights);
      this.stateWeights = __this__stateWeights;
    }
    if (other.isSetAuthorName()) {
      this.authorName = other.authorName;
    }
    if (other.isSetAuthorEmailAddress()) {
      this.authorEmailAddress = other.authorEmailAddress;
    }
    if (other.isSetPasscode()) {
      this.passcode = other.passcode;
    }
  }

  public Experiment deepCopy() {
    return new Experiment(this);
  }

  @Override
  public void clear() {
    this.experimentName = null;
    this.stateWeights = null;
    this.authorName = null;
    this.authorEmailAddress = null;
    this.passcode = null;
  }

  public String getExperimentName() {
    return this.experimentName;
  }

  public Experiment setExperimentName(String experimentName) {
    this.experimentName = experimentName;
    return this;
  }

  public void unsetExperimentName() {
    this.experimentName = null;
  }

  /** Returns true if field experimentName is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentName() {
    return this.experimentName != null;
  }

  public void setExperimentNameIsSet(boolean value) {
    if (!value) {
      this.experimentName = null;
    }
  }

  public int getStateWeightsSize() {
    return (this.stateWeights == null) ? 0 : this.stateWeights.size();
  }

  public void putToStateWeights(String key, int val) {
    if (this.stateWeights == null) {
      this.stateWeights = new HashMap<String,Integer>();
    }
    this.stateWeights.put(key, val);
  }

  public Map<String,Integer> getStateWeights() {
    return this.stateWeights;
  }

  public Experiment setStateWeights(Map<String,Integer> stateWeights) {
    this.stateWeights = stateWeights;
    return this;
  }

  public void unsetStateWeights() {
    this.stateWeights = null;
  }

  /** Returns true if field stateWeights is set (has been assigned a value) and false otherwise */
  public boolean isSetStateWeights() {
    return this.stateWeights != null;
  }

  public void setStateWeightsIsSet(boolean value) {
    if (!value) {
      this.stateWeights = null;
    }
  }

  public String getAuthorName() {
    return this.authorName;
  }

  public Experiment setAuthorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  public void unsetAuthorName() {
    this.authorName = null;
  }

  /** Returns true if field authorName is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorName() {
    return this.authorName != null;
  }

  public void setAuthorNameIsSet(boolean value) {
    if (!value) {
      this.authorName = null;
    }
  }

  public String getAuthorEmailAddress() {
    return this.authorEmailAddress;
  }

  public Experiment setAuthorEmailAddress(String authorEmailAddress) {
    this.authorEmailAddress = authorEmailAddress;
    return this;
  }

  public void unsetAuthorEmailAddress() {
    this.authorEmailAddress = null;
  }

  /** Returns true if field authorEmailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorEmailAddress() {
    return this.authorEmailAddress != null;
  }

  public void setAuthorEmailAddressIsSet(boolean value) {
    if (!value) {
      this.authorEmailAddress = null;
    }
  }

  public String getPasscode() {
    return this.passcode;
  }

  public Experiment setPasscode(String passcode) {
    this.passcode = passcode;
    return this;
  }

  public void unsetPasscode() {
    this.passcode = null;
  }

  /** Returns true if field passcode is set (has been assigned a value) and false otherwise */
  public boolean isSetPasscode() {
    return this.passcode != null;
  }

  public void setPasscodeIsSet(boolean value) {
    if (!value) {
      this.passcode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPERIMENT_NAME:
      if (value == null) {
        unsetExperimentName();
      } else {
        setExperimentName((String)value);
      }
      break;

    case STATE_WEIGHTS:
      if (value == null) {
        unsetStateWeights();
      } else {
        setStateWeights((Map<String,Integer>)value);
      }
      break;

    case AUTHOR_NAME:
      if (value == null) {
        unsetAuthorName();
      } else {
        setAuthorName((String)value);
      }
      break;

    case AUTHOR_EMAIL_ADDRESS:
      if (value == null) {
        unsetAuthorEmailAddress();
      } else {
        setAuthorEmailAddress((String)value);
      }
      break;

    case PASSCODE:
      if (value == null) {
        unsetPasscode();
      } else {
        setPasscode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPERIMENT_NAME:
      return getExperimentName();

    case STATE_WEIGHTS:
      return getStateWeights();

    case AUTHOR_NAME:
      return getAuthorName();

    case AUTHOR_EMAIL_ADDRESS:
      return getAuthorEmailAddress();

    case PASSCODE:
      return getPasscode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPERIMENT_NAME:
      return isSetExperimentName();
    case STATE_WEIGHTS:
      return isSetStateWeights();
    case AUTHOR_NAME:
      return isSetAuthorName();
    case AUTHOR_EMAIL_ADDRESS:
      return isSetAuthorEmailAddress();
    case PASSCODE:
      return isSetPasscode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Experiment)
      return this.equals((Experiment)that);
    return false;
  }

  public boolean equals(Experiment that) {
    if (that == null)
      return false;

    boolean this_present_experimentName = true && this.isSetExperimentName();
    boolean that_present_experimentName = true && that.isSetExperimentName();
    if (this_present_experimentName || that_present_experimentName) {
      if (!(this_present_experimentName && that_present_experimentName))
        return false;
      if (!this.experimentName.equals(that.experimentName))
        return false;
    }

    boolean this_present_stateWeights = true && this.isSetStateWeights();
    boolean that_present_stateWeights = true && that.isSetStateWeights();
    if (this_present_stateWeights || that_present_stateWeights) {
      if (!(this_present_stateWeights && that_present_stateWeights))
        return false;
      if (!this.stateWeights.equals(that.stateWeights))
        return false;
    }

    boolean this_present_authorName = true && this.isSetAuthorName();
    boolean that_present_authorName = true && that.isSetAuthorName();
    if (this_present_authorName || that_present_authorName) {
      if (!(this_present_authorName && that_present_authorName))
        return false;
      if (!this.authorName.equals(that.authorName))
        return false;
    }

    boolean this_present_authorEmailAddress = true && this.isSetAuthorEmailAddress();
    boolean that_present_authorEmailAddress = true && that.isSetAuthorEmailAddress();
    if (this_present_authorEmailAddress || that_present_authorEmailAddress) {
      if (!(this_present_authorEmailAddress && that_present_authorEmailAddress))
        return false;
      if (!this.authorEmailAddress.equals(that.authorEmailAddress))
        return false;
    }

    boolean this_present_passcode = true && this.isSetPasscode();
    boolean that_present_passcode = true && that.isSetPasscode();
    if (this_present_passcode || that_present_passcode) {
      if (!(this_present_passcode && that_present_passcode))
        return false;
      if (!this.passcode.equals(that.passcode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_experimentName = true && (isSetExperimentName());
    list.add(present_experimentName);
    if (present_experimentName)
      list.add(experimentName);

    boolean present_stateWeights = true && (isSetStateWeights());
    list.add(present_stateWeights);
    if (present_stateWeights)
      list.add(stateWeights);

    boolean present_authorName = true && (isSetAuthorName());
    list.add(present_authorName);
    if (present_authorName)
      list.add(authorName);

    boolean present_authorEmailAddress = true && (isSetAuthorEmailAddress());
    list.add(present_authorEmailAddress);
    if (present_authorEmailAddress)
      list.add(authorEmailAddress);

    boolean present_passcode = true && (isSetPasscode());
    list.add(present_passcode);
    if (present_passcode)
      list.add(passcode);

    return list.hashCode();
  }

  @Override
  public int compareTo(Experiment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExperimentName()).compareTo(other.isSetExperimentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentName, other.experimentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateWeights()).compareTo(other.isSetStateWeights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateWeights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateWeights, other.stateWeights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorName()).compareTo(other.isSetAuthorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorName, other.authorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorEmailAddress()).compareTo(other.isSetAuthorEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorEmailAddress, other.authorEmailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPasscode()).compareTo(other.isSetPasscode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasscode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passcode, other.passcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Experiment(");
    boolean first = true;

    sb.append("experimentName:");
    if (this.experimentName == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stateWeights:");
    if (this.stateWeights == null) {
      sb.append("null");
    } else {
      sb.append(this.stateWeights);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorName:");
    if (this.authorName == null) {
      sb.append("null");
    } else {
      sb.append(this.authorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorEmailAddress:");
    if (this.authorEmailAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.authorEmailAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passcode:");
    if (this.passcode == null) {
      sb.append("null");
    } else {
      sb.append(this.passcode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExperimentStandardSchemeFactory implements SchemeFactory {
    public ExperimentStandardScheme getScheme() {
      return new ExperimentStandardScheme();
    }
  }

  private static class ExperimentStandardScheme extends StandardScheme<Experiment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Experiment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPERIMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experimentName = iprot.readString();
              struct.setExperimentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE_WEIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.stateWeights = new HashMap<String,Integer>(2*_map0.size);
                String _key1;
                int _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readI32();
                  struct.stateWeights.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setStateWeightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorName = iprot.readString();
              struct.setAuthorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTHOR_EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorEmailAddress = iprot.readString();
              struct.setAuthorEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PASSCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passcode = iprot.readString();
              struct.setPasscodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Experiment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.experimentName != null) {
        oprot.writeFieldBegin(EXPERIMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.experimentName);
        oprot.writeFieldEnd();
      }
      if (struct.stateWeights != null) {
        oprot.writeFieldBegin(STATE_WEIGHTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.stateWeights.size()));
          for (Map.Entry<String, Integer> _iter4 : struct.stateWeights.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeI32(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.authorName != null) {
        oprot.writeFieldBegin(AUTHOR_NAME_FIELD_DESC);
        oprot.writeString(struct.authorName);
        oprot.writeFieldEnd();
      }
      if (struct.authorEmailAddress != null) {
        oprot.writeFieldBegin(AUTHOR_EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.authorEmailAddress);
        oprot.writeFieldEnd();
      }
      if (struct.passcode != null) {
        oprot.writeFieldBegin(PASSCODE_FIELD_DESC);
        oprot.writeString(struct.passcode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExperimentTupleSchemeFactory implements SchemeFactory {
    public ExperimentTupleScheme getScheme() {
      return new ExperimentTupleScheme();
    }
  }

  private static class ExperimentTupleScheme extends TupleScheme<Experiment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Experiment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExperimentName()) {
        optionals.set(0);
      }
      if (struct.isSetStateWeights()) {
        optionals.set(1);
      }
      if (struct.isSetAuthorName()) {
        optionals.set(2);
      }
      if (struct.isSetAuthorEmailAddress()) {
        optionals.set(3);
      }
      if (struct.isSetPasscode()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExperimentName()) {
        oprot.writeString(struct.experimentName);
      }
      if (struct.isSetStateWeights()) {
        {
          oprot.writeI32(struct.stateWeights.size());
          for (Map.Entry<String, Integer> _iter5 : struct.stateWeights.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeI32(_iter5.getValue());
          }
        }
      }
      if (struct.isSetAuthorName()) {
        oprot.writeString(struct.authorName);
      }
      if (struct.isSetAuthorEmailAddress()) {
        oprot.writeString(struct.authorEmailAddress);
      }
      if (struct.isSetPasscode()) {
        oprot.writeString(struct.passcode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Experiment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.experimentName = iprot.readString();
        struct.setExperimentNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.stateWeights = new HashMap<String,Integer>(2*_map6.size);
          String _key7;
          int _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readI32();
            struct.stateWeights.put(_key7, _val8);
          }
        }
        struct.setStateWeightsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authorName = iprot.readString();
        struct.setAuthorNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.authorEmailAddress = iprot.readString();
        struct.setAuthorEmailAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.passcode = iprot.readString();
        struct.setPasscodeIsSet(true);
      }
    }
  }

}

